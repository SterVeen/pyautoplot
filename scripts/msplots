#!/usr/bin/env python2
# -*- python -*-

import matplotlib
matplotlib.use('agg')
from getopt import gnu_getopt as getopt
from getopt import GetoptError
import os,sys,time, socket

from pyautoplot import *
import pyautoplot.forkmap as forkmap
from pyautoplot import __version__


def warn(s):
    print('')
    print('|------------------------------------------------------------------------------|')
    print('| WARNING: '+s)
    print('|------------------------------------------------------------------------------|')
    print('')
    wrong_answer = True
    answer=''
    while wrong_answer:
        sys.stdout.write('Do you wish to continue (yes, I do/no)>>> ')
        answer = sys.stdin.readline().strip()
        wrong_answer = answer not in ['yes, I do', 'no']
        if len(answer)> 15:
            sys.stdout.write('>>> stop babbling')
            if answer[0:9] == 'yes, I do':
                sys.stdout.write('! I will continue, though. <<<\n')
                wrong_answer = False
                answer = answer[0:9]
            else:
                sys.stdout.write(', and answer the question! <<<\n')
                pass
            time.sleep(2)
            pass
        pass
    if answer == 'yes, I do':
        return True
    else:
        exit(-1)
    pass


def print_help():
    print("""Usage
-----

msplots [options] <SAS ID 1> <SAS ID 2> ...

  -p/--prefix <directory>   Root directory under which output
                            directories are created. Default is
                            /globaldata/inspect, or, if that does
                            not exist, ~/inspect/
  -o/--output <name>        Name of output directory. Default is
                            <SAS ID>, e.g. 121426

  -m/--memory <GB>          Maximum amount of memory that msinspect
                            may use in GB. Default is 3. Less than 1
                            is not recommended.

  -h/--help                 Display this help

Input
-----



Output
------



""")
    return -1


def process_names():
    '''Return (process_name, RSS mem) tuples'''
    proc_dirs = [os.path.join('/proc', pid_name) for pid_name in os.listdir('/proc')]
    cmd_lines = []
    for proc_dir in proc_dirs:
        try:
            cmd_lines.append((open(os.path.join(proc_dir, 'cmdline')).readline(),
                              open(os.path.join(proc_dir, 'stat')).readline().split()[21]))
        except IOError:
            pass
    return [(cmd_line[0].strip(' \t\n\r').split('\x00'), int(cmd_line[1]))
            for cmd_line in cmd_lines if cmd_line[0].strip('\t\n\r\x00') != '']


def msplots_mem_use_bytes():
    r'''
    Compute RSS memory claimed by *all* currently running msplots
    processes and their associated launchers.
    '''
    processes_plus_rss_mem = process_names()
    msplots_procs = [proc for proc in processes_plus_rss_mem
                     if 'msplots' in ' '.join(proc[0])]
    return sum([rss for name, rss in msplots_procs])
    

def main(argv):
    print('')
    version = 'pyautoplot ' + __version__
    print(version)
    print('-'*len(version))
    if len(argv) == 1:
        return print_help()
    options, arguments = getopt(argv[1:],
                                'p:o:m:h',
                                ['prefix=',
                                 'output=',
                                 'memory=',
                                 'help'])
    prefix=os.path.join('/globaldata', 'inspect')
    if not os.path.exists(prefix):
        prefix=os.path.expanduser('~/inspect/')
    memory=2.25
    output_dir=None

    for(option,value) in options:
        if option in ['-p', '--prefix']:
            prefix=os.path.expanduser(value)
        elif option in ['-o', '--output']:
            output_dir=value
        elif option in ['-m', '--memory']:
            memory = float(value)
        elif option in ['-h', '--help']:
            return print_help()
        else:
            print('Unhandled option %r. Please contact developer.' % option)
            return print_help()

    if len(arguments) == 0:
        raise GetoptError('please supply one or more SAS/MAC IDs or measurement sets; you supplied none.')

    sas_ids = []
    data_sets = []
    for argument in arguments:
        try:
            sas_ids.append(int(argument))
        except ValueError:
            data_sets.append(argument)
    
    if memory <= 0.0:
        raise GetoptError('%r GB of memory is not enough; consider using 1 GB or more.' % (memory,))

    if memory < 1.0:
        warn('%r GB of memory is probably not enough; consider using 1 GB or more.' % (memory,))
        pass

    if not os.path.exists(prefix):
        raise OSError('Directory prefix %s does not exist.' % (prefix,))

    for sas_id in sas_ids:
        if 'locus' in socket.gethostname().lower():
            if msplots_mem_use_bytes() > 3*memory*(1024**3):
                continue # Skip this run if there are too many processes still consuming memory
        if output_dir is None:
            output_directory = str(sas_id)
        else:
            output_directory = output_dir
        msses    = find_msses(str(sas_id))
        max_cpus = max(1, forkmap.nprocessors()/2)
        if len(msses) > 0:
            #node    = get_node_number_in_subcluster()
            #mymsses = msses[node % len(msses)::min(len(msses), 10)]
            #print('\n'.join(mymsses))
            forkmap.map(lambda ms: inspect_ms(
                    ms, ms_id=sas_id,
                    max_mem_bytes=int((memory/min(max_cpus, len(msses)))*2**30),
                    root=prefix, cmap=cm.gray_r, output_dir = output_directory),
                        msses,
                        n=max_cpus)

    for data_set in data_sets:
        inspect_ms(data_set,
                   ms_id=None, # Can be None of output_directory is explicitly set
                   max_mem_bytes=int(memory*2**30),
                   root=prefix, cmap=cm.gray_r,
                   output_dir=output_dir)
    return 0




if __name__ == "__main__":
    try:
        exit(main(sys.argv))
    except (OSError, IOError):
        print('error: '+str(sys.exc_info()[1]))
        exit(-1)
    except (GetoptError):
        print('error: '+str(sys.exc_info()[1]))
        print('use "'+sys.argv[0]+'" for help.')
        exit(-1)
    except (MemoryError, ):
        print('error: '+str(sys.exc_info()[1]))
        print('Cannot allocate required memory.')
        print('use "'+sys.argv[0]+'" for help.')
        exit(-1)

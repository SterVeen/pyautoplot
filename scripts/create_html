#!/usr/bin/env python2
# -*- python -*-

import logging
import os, sys, glob, socket
from optparse import OptionParser



def initialize_logging(log_level, log_dir = '/globaldata/inspect/'):
    r'''
    Initialize the Python logging system. The log file will be written
    to ``/globaldata/inspect/create_html.log``.

    **Parameters**

    log_level : string
        Minimum log level of lines to write into the
        log file. Possible values are 'DEBUG', 'INFO', 'WARNING', and
        'ERROR'.

    log_dir : string
        Directory where the log file must be written.


    **Returns**

    A string containing the log file name.

    **Examples**

    >>> initialize_logging(log_level = 'INFO')
    '/globaldata/inspect/create_html.log'
    '''
    log_levels   = {'DEBUG'  : logging.DEBUG,
                    'INFO'   : logging.INFO,
                    'WARNING': logging.WARNING,
                    'ERROR'  : logging.ERROR}
    level = log_levels[log_level]
    
    log_format     = ('create_html@' + socket.gethostname() +
                      ' %(asctime)s %(levelname)8s - %(message)s')
    log_file_name  = os.path.join(log_dir, 'create_html.log')

    logger       = logging.root
    for handler in logger.handlers:
        logger.removeHandler(handler)

    logger.setLevel(level)
    formatter    = logging.Formatter(log_format)

    file_handler = logging.FileHandler(log_file_name)
    logger.addHandler(file_handler)
        
    for handler in logger.handlers:
        handler.setFormatter(formatter)
        handler.setLevel(level)
    logging.debug('Initialized logging')
    return log_file_name


initialize_logging('DEBUG')

try:
    import matplotlib
    matplotlib.use('agg') # Prevent initialisation of GUI system
    from pyautoplot import __version__
except ImportError:
    logging.warning(str(sys.exc_info()[0]))
    logging.warning('Command line: %s', ' '.join(sys.argv))
    __version__ = 'unknown'

logging.debug('Using pyautoplot version %s', __version__)



    


def create_html_main(argv):
    r'''
    The program's main function.

    **Parameters**
    
    argv : list of strings
        The contents of ``sys.argv``

    **Returns**
    
    An integer, where success is indicated by the value 0.

    **Examples**

    >>> create_html_main(['create_html', '60807', '60806'])
    0
    '''
    logging.debug('create_html_main(argv = %r)', argv)
    options, sas_ids = parse_command_line(argv)
    for num, sas_id in enumerate(sorted(sas_ids)[::-1]):
        logging.debug('Processing SAS ID: %d', sas_id)
        try:
            observation_html(sas_id,
                             plot_root = options.plot_root,
                             html_root = options.html_root)
        except IOError:
            logging.error(str(sys.exc_info()[1]))

        if num % 10 == 0:
            main_index_html(plot_root = options.plot_root,
                            html_root = options.html_root)

            
    main_index_html(plot_root = options.plot_root,
                    html_root = options.html_root)
    return 0



def parse_command_line(argv):
    r'''
    '''
    logging.debug('parse_command_line(argv = %r)', argv)
    parser = OptionParser(usage   = '%prog <sas ID>',
                          version = '%prog (pyautoplot ' + __version__ + ')')

    parser.add_option(
        '--plot-root', type = 'string',
        dest    = 'plot_root',
        help    = 'Plots are found under DIR/<sasid> (default: %default)',
        metavar = 'DIR',
        default = os.path.join('/', 'globaldata', 'inspect'))

    parser.add_option(
        '--html-root', type = 'string',
        dest    = 'html_root',
        help    = 'Use DIR for HTML output (default: %default)',
        metavar = 'DIR',
        default = os.path.join('/', 'globaldata', 'inspect', 'HTML'))

    (options, args) = parser.parse_args(argv[1:])
    
    if len(args) == 0:
        raise ValueError('Specify at least one SAS ID')
    sas_ids = [int(arg) for arg in args]
    return options, sas_ids



def subband(plot_file_name):
    r'''
    Extract sub band name from ``plot_file_name``.
    
    **Parameters**

    plot_file_name : string
        File name of an inspection plot.

    **Returns**
    
    A string containing the sub band identifier with format 'SBnnn',
    where ``nnn`` are three digits.

    **Examples**

    >>> subband('/globaldata/inspect/60873/L60873_SAP000_SB049_uv-flags.png')
    'SB049'
    '''
    return [item for item in plot_file_name.split('_')
            if item[0:2] == 'SB' and len(item) == 5][0]


def force_mkdir(path_name):
    r'''
    '''
    logging.debug('force_mkdir(path_name = %r)', path_name)
    if not os.path.exists(path_name):
        os.mkdir(path_name)

 
def contains(sub_string, strings):
    r'''
    '''
    return sorted([string for string in strings if sub_string in string])




def plot_html(plot_path, image_width = 700):
    r'''
    '''
    return '''<a href="%(plot_path)s">
    <img src="%(plot_path)s" width="%(image_width)dpx"></img>
</a>''' % {'plot_path'  : plot_path,
           'image_width': image_width}


def subband_html(sas_id, sb_name, rel_plot_files):
    r'''
    '''
    timeseries    = contains('timeseries'  , rel_plot_files)
    sensitivities = contains('station-gain', rel_plot_files)
    
    timeseries_html    = [plot_html(image) for image in timeseries]
    sensitivities_html = [plot_html(image) for image in sensitivities]
    
    overview_rows = ['<tr><td>'+line_graph+'</td><td>'+bar_graph+'</td></tr>'
                     for (line_graph, bar_graph)
                     in zip(timeseries_html, sensitivities_html)]
    flagged_std   = plot_html(contains('flagged-standard-deviation',
                                       rel_plot_files)[0])
    flagged_mean  = plot_html(contains('flagged-mean', rel_plot_files)[0])
    flags         = plot_html(contains('flags'       , rel_plot_files)[0])
    zeros         = plot_html(contains('zeroes'      , rel_plot_files)[0])

    html_template = '''
<html>
    <head> <title}%(title)s</title> </head>
    <body>
    <center>
        <h1>%(title)s</h1>


        <p>
          <ul>
            <li><a href="../index.html">Subbands</a> <a href="../../index.html">Projects</a></li>
          </ul>
        </p>

        <table>
        %(overview_rows)s
        <tr>
            <td>%(flagged_std)s</td>
            <td>%(flagged_mean)s</td>
        </tr>
        <tr>
            <td>%(flags)s</td>
            <td>%(zeros)s</td>
        </tr>
        </table>
    </center>
    </body>
</html>'''

    return html_template % {
        'title'        : 'L'+str(sas_id)+' '+sb_name,
        'overview_rows': '\n'.join(overview_rows),
        'flagged_std'  : flagged_std,
        'flagged_mean' : flagged_mean,
        'flags'        : flags,
        'zeros'        : zeros}


def observation_html(sas_id, plot_root, html_root):
    r'''
    '''
    logging.debug('observation_html(sas_id = %r, plot_root = %r, html_root = %r)',
                  sas_id, plot_root, html_root)
    obs_html_root = os.path.join(html_root, str(sas_id))
    sb_html_root  = os.path.join(obs_html_root, 'SBpages')
    obs_plot_root = os.path.join(plot_root, str(sas_id))

    if not os.path.exists(obs_plot_root):
        raise IOError('Directory "%s" does not exist' % obs_plot_root)

    force_mkdir(obs_html_root)
    force_mkdir(sb_html_root)

    pattern    = os.path.join(obs_plot_root, '*.png')
    plot_files = [os.path.relpath(full_path, sb_html_root)
                  for full_path in glob.glob(pattern)]
            
    sb_plots = {}
    for plot_file in plot_files:
        key = subband(plot_file)
        if not sb_plots.has_key(key):
            sb_plots[key] = []
        sb_plots[key].append(plot_file)

    sb_list = sorted(sb_plots.keys())
    for sb_name in sb_list:
        file_name = os.path.join(sb_html_root, sb_name+'.html')
        open(file_name, 'w').write(
            subband_html(sas_id, sb_name, sb_plots[sb_name]))
        
    
    observation_index_name = os.path.join(obs_html_root, 'index.html')
    
    sb_page_list = ['<a href="SBpages/%s.html">%s</a>' % (name, name)
                    for name in sb_list]
    open(observation_index_name, 'w').write('''
<html>
    <head><title>L%(sas_id)s</title></head>
    <body>
    <h1>L%(sas_id)s</h1>
    <p><ul>
        <li><a href="../index.html">Projects</a></li>
    </ul></p>

    %(sub_band_pages)s
    </body>
</html>
''' % {'sas_id'        : str(sas_id),
       'sub_band_pages': ' '.join(sb_page_list)})
                            


def parset_summary(parset_name):
    r'''
    Observation.antennaSet = LBA_INNER
    Observation.bandFilter = LBA_10_90
    Observation.startTime = '2012-07-03 14:44:44'
    Observation.stopTime = '2012-07-03 14:46:44'
    Observation.Beam[0].target = '3C 196'
    Observation.Beamformer.stationList = []
    Observation.Campaign.CO_I = 'Pizzo, Dr. Roberto Francesco'
    Observation.Campaign.PI = 'Polatidis, Dr Antonios'
    Observation.Campaign.contact = 'Polatidis, Dr Antonios'
    Observation.Campaign.name = 2012LOFAROBS
    Observation.Campaign.title = 2012LOFAROBS
    '''
    def value(line):
        return line.split('=')[-1].strip('\' \n')

    parset = {'campaign_name': '',
              'target'       : '',
              'start_time'   : '',
              'stop_time'    : '',
              'antenna_set'  : '',
              'band_filter'  : ''}
    
    if os.path.exists(parset_name):
        parset_lines = open(parset_name).readlines()
        for line in parset_lines:
            if 'Campaign.name' in line:
                parset['campaign_name'] = value(line)
            elif 'Beam[0].target' in line:
                parset['target'] = value(line)
            elif 'Observation.startTime' in line:
                parset['start_time'] = value(line)
            elif 'Observation.stopTime' in line:
                parset['stop_time'] = value(line)
            elif 'Observation.antennaSet' in line:
                parset['antenna_set'] = value(line)
            elif  'Observation.bandFilter' in line:
                parset['band_filter'] = value(line)
            else:
                pass
    return parset


def observation_table_row(sas_id, parset):
    r'''
    '''
    format_dict           = parset.copy()
    format_dict['sas_id'] = str(sas_id)
    html = '''
    <tr><th><a href="%(sas_id)s/index.html">L%(sas_id)s</a>&nbsp;&nbsp;&nbsp;</th>
        <td>%(campaign_name)s&nbsp;&nbsp;&nbsp;</td> <td>%(target)s&nbsp;&nbsp;&nbsp;</td>
        <td>%(antenna_set)s&nbsp;&nbsp;&nbsp;</td>   <td>%(band_filter)s&nbsp;&nbsp;&nbsp;</td>
        <td>%(start_time)s&nbsp;&nbsp;&nbsp;</td>    <td>%(stop_time)s&nbsp;&nbsp;&nbsp;</td>
    </tr>
''' % format_dict
    return html


def main_index_html(plot_root, html_root):
    r'''
    '''
    logging.debug('main_index_html(plot_root = %r, html_root = %r)', plot_root, html_root)

    index_name = os.path.join(html_root, 'index.html')
    plot_sas_id_pattern = os.path.join(plot_root, '[0123456789]'*5)
    sas_id_with_plot = [int(os.path.split(sas_id)[-1]) for sas_id in glob.glob(plot_sas_id_pattern)]
    html_sas_id_pattern = os.path.join(html_root, '[0123456789]'*5)
    sas_id_with_html = [int(os.path.split(sas_id)[-1]) for sas_id in glob.glob(html_sas_id_pattern)]
    sas_ids = sorted(set(sas_id_with_html).intersection(set(sas_id_with_plot)))[::-1]
    parsets = [parset_summary(os.path.join('/globalhome', 'lofarsystem', 'log',
                                           'L'+str(sas_id)+'.parset'))
               for sas_id in sas_ids]
    
    open(index_name, 'w').write('''
<html>
    <head><title>LOFAR Inspection plots</title></head>
    <body>
        <h1>LOFAR inspection plots</h1>
        <table>
        %s
        </table>
    </body>
</html>
''' % '\n'.join([observation_table_row(sas_id, parset)
                 for sas_id, parset in zip(sas_ids, parsets)] ))
    

if __name__ == '__main__':
    try:
        sys.exit(create_html_main(sys.argv))
    except SystemExit:
        raise
    except:
        logging.error(str(sys.exc_info()[0]))
        sys.exit(2)
